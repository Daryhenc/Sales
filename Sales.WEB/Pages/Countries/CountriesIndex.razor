@page "/countries"

@inject IRepository repository
@inject ISnackbar snackbar
@inject NavigationManager navigationManager

<MudButton Variant="Variant.Outlined" Color="Color.Primary" Href="/contries/create">Nuevo País</MudButton>

<MudMessageBox @ref="mbox" Title="Confirmación" CancelText="Cancelar">
    <MessageContent>
        <p> Esta seguro de borrar este pais? </p>
    </MessageContent>
    <YesButton>
        <MudButton Variant="Variant.Filled" Color="Color.Error" StartIcon="@Icons.Material.Filled.DeleteForever">Borrar</MudButton>
    </YesButton>
</MudMessageBox>

<GenericList MyList="Countries">
    <Body>      
        <MudTable Items="@Countries" Hover="true" Bordered="true">
            <ToolBarContent>
                <MudText Typo="Typo.h6">Paises</MudText>
                <MudSpacer />
                <MudTextField @bind-Value="searchString1" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
            </ToolBarContent>
            <HeaderContent>
                <MudTh><MudTableSortLabel SortBy="new Func<Country, object>(x=>x.CountryId)">Id de Pais </MudTableSortLabel> </MudTh>
                <MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<Country, object>(x=>x.Name)">País</MudTableSortLabel> </MudTh>
                <MudTh>N.- de provincias</MudTh>
                <MudTh></MudTh>
            </HeaderContent>
            <RowTemplate Context="CountriesContext">
                <MudTd DataLabel="CountryId"> @CountriesContext.CountryId</MudTd>
                <MudTd DataLabel="País">@CountriesContext.Name</MudTd>
                <MudTd DataLabel="N.- de provincias">@CountriesContext.ProvinceNumber</MudTd>
                <MudTd>
                    <MudFab OnClick="@(() => Detail(CountriesContext.CountryId))"
                            Color="Color.Warning"
                            StartIcon="@Icons.Material.Filled.Visibility"
                            Size="Size.Small"
                            IconSize="Size.Small">
                    </MudFab>
                    <MudFab OnClick="@(() => Edit(CountriesContext.CountryId))"
                            Color="Color.Info"
                            StartIcon="@Icons.Material.Filled.Edit"
                            Size="Size.Small"
                            IconSize="Size.Small">
                    </MudFab>
                    <MudFab OnClick="@(() => DeleteAsync(CountriesContext.CountryId))"
                            Color="Color.Error"
                            StartIcon="@Icons.Material.Filled.DeleteSweep"
                            Size="Size.Small"
                            IconSize="Size.Small">
                    </MudFab>
                </MudTd>
            </RowTemplate>
            <PagerContent>
                <MudTablePager />
            </PagerContent>
        </MudTable>
    </Body>
</GenericList>


@code {
    public List<Country>? Countries { get; set; }

    MudMessageBox? mbox { get; set; }
    private string searchString1 = "";

    protected override async Task OnInitializedAsync()
    {
        await LoadAsync();
    }

    private async Task LoadAsync()
    {
        var responseHttp = await repository.Get<List<Country>>("/api/country");
        Countries = responseHttp.Response;
    }

    private void Edit(int countryId)
    {
        navigationManager.NavigateTo($"/countries/edit/{countryId}");
    }

    private void Detail(int countryId)
    {
        navigationManager.NavigateTo($"/countries/details/{countryId}");
    }

    private async void DeleteAsync(int countryId)
    {
        var result = await mbox!.Show();
        if (result == null || result == false)
        {
            return;
        }
        var responseHttp = await repository.Delete($"/api/country/{countryId}");
        if (responseHttp.Error)
        {
            if (responseHttp.HttpResponseMessage.StatusCode != HttpStatusCode.NotFound)
            {
                var message = await responseHttp.GetErrorMessageAsync();
                snackbar.Add(message, Severity.Error);
                return;
            }
        }
        Countries!.Clear();
        await LoadAsync();


    }

    private bool FilterFunc1(Country element) => FilterFunc(element, searchString1);

    private bool FilterFunc(Country element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }

}
