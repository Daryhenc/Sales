@inject IDialogService dialogService

<NavigationLock OnBeforeInternalNavigation="OnBeforeInternalNavigation" />

<EditForm EditContext="editContext" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />
    <MudTextField @bind-Value="Province.Name" Label="Nombre de Provincia" Variant="Variant.Outlined" For="@(() => Province.Name)"></MudTextField>
    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Outlined" Color="Color.Primary">Crear Provincia</MudButton>
    <MudButton @onclick="ReturnAction" Variant="Variant.Outlined" Color="Color.Secondary">Retornar</MudButton>
</EditForm>

@code {
    private EditContext editContext = null!;

    [Parameter]
    [EditorRequired]
    public Province Province { get; set; } = null!;

    [Parameter]
    [EditorRequired]
    public EventCallback OnValidSubmit { get; set; }

    [Parameter]
    [EditorRequired]
    public EventCallback ReturnAction { get; set; }

    public bool FormPostedSuccessfully { get; set; }

    protected override void OnInitialized()
    {
        editContext = new EditContext(Province);
    }

    private async Task OnBeforeInternalNavigation(LocationChangingContext context)
    {
        var formWasModified = editContext.IsModified();
        if (!formWasModified || FormPostedSuccessfully)
        {
            return;
        }
        var result = await dialogService.ShowMessageBox(
            "Warning",
            "¿Esta seguro de salir sin guardar los cambios?",
            yesText: "Si", cancelText: "No");

        if (result == true)
        {
            return;
        }
        context.PreventNavigation();
    }
}
